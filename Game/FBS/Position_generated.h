// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSITION_H_
#define FLATBUFFERS_GENERATED_POSITION_H_

#include "flatbuffers/flatbuffers.h"

struct Vector3;

struct Vector2;

struct CreatePlayer;
struct CreatePlayerBuilder;

struct CreateBullet;
struct CreateBulletBuilder;

struct UpdateHealth;
struct UpdateHealthBuilder;

struct MoveObject;
struct MoveObjectBuilder;

struct RequestObjectRemoval;
struct RequestObjectRemovalBuilder;

struct RemoveObject;
struct RemoveObjectBuilder;

enum objectTypes : uint8_t {
  objectTypes_Player = 0,
  objectTypes_Bullet = 1,
  objectTypes_MIN = objectTypes_Player,
  objectTypes_MAX = objectTypes_Bullet
};

inline const objectTypes (&EnumValuesobjectTypes())[2] {
  static const objectTypes values[] = {
    objectTypes_Player,
    objectTypes_Bullet
  };
  return values;
}

inline const char * const *EnumNamesobjectTypes() {
  static const char * const names[3] = {
    "Player",
    "Bullet",
    nullptr
  };
  return names;
}

inline const char *EnumNameobjectTypes(objectTypes e) {
  if (flatbuffers::IsOutRange(e, objectTypes_Player, objectTypes_Bullet)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesobjectTypes()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vector2()
      : x_(0),
        y_(0) {
  }
  Vector2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vector2, 8);

struct CreatePlayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreatePlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_POSITION = 6,
    VT_ROTATION = 8,
    VT_VELOCITY = 10
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const Vector2 *position() const {
    return GetStruct<const Vector2 *>(VT_POSITION);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  float velocity() const {
    return GetField<float>(VT_VELOCITY, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<Vector2>(verifier, VT_POSITION) &&
           VerifyField<float>(verifier, VT_ROTATION) &&
           VerifyField<float>(verifier, VT_VELOCITY) &&
           verifier.EndTable();
  }
};

struct CreatePlayerBuilder {
  typedef CreatePlayer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CreatePlayer::VT_UID, uid, 0);
  }
  void add_position(const Vector2 *position) {
    fbb_.AddStruct(CreatePlayer::VT_POSITION, position);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(CreatePlayer::VT_ROTATION, rotation, 0.0f);
  }
  void add_velocity(float velocity) {
    fbb_.AddElement<float>(CreatePlayer::VT_VELOCITY, velocity, 0.0f);
  }
  explicit CreatePlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreatePlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreatePlayer>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreatePlayer> CreateCreatePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const Vector2 *position = 0,
    float rotation = 0.0f,
    float velocity = 0.0f) {
  CreatePlayerBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_velocity(velocity);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

struct CreateBullet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreateBulletBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_POSITIOM = 6,
    VT_ROTATION = 8,
    VT_VELOCITY = 10,
    VT_TIMESTAMP = 12
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const Vector2 *positiom() const {
    return GetStruct<const Vector2 *>(VT_POSITIOM);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  float velocity() const {
    return GetField<float>(VT_VELOCITY, 0.0f);
  }
  float timestamp() const {
    return GetField<float>(VT_TIMESTAMP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<Vector2>(verifier, VT_POSITIOM) &&
           VerifyField<float>(verifier, VT_ROTATION) &&
           VerifyField<float>(verifier, VT_VELOCITY) &&
           VerifyField<float>(verifier, VT_TIMESTAMP) &&
           verifier.EndTable();
  }
};

struct CreateBulletBuilder {
  typedef CreateBullet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(CreateBullet::VT_UID, uid, 0);
  }
  void add_positiom(const Vector2 *positiom) {
    fbb_.AddStruct(CreateBullet::VT_POSITIOM, positiom);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(CreateBullet::VT_ROTATION, rotation, 0.0f);
  }
  void add_velocity(float velocity) {
    fbb_.AddElement<float>(CreateBullet::VT_VELOCITY, velocity, 0.0f);
  }
  void add_timestamp(float timestamp) {
    fbb_.AddElement<float>(CreateBullet::VT_TIMESTAMP, timestamp, 0.0f);
  }
  explicit CreateBulletBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreateBullet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreateBullet>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateBullet> CreateCreateBullet(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const Vector2 *positiom = 0,
    float rotation = 0.0f,
    float velocity = 0.0f,
    float timestamp = 0.0f) {
  CreateBulletBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_timestamp(timestamp);
  builder_.add_velocity(velocity);
  builder_.add_rotation(rotation);
  builder_.add_positiom(positiom);
  return builder_.Finish();
}

struct UpdateHealth FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UpdateHealthBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_HEALTH = 6
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  float health() const {
    return GetField<float>(VT_HEALTH, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<float>(verifier, VT_HEALTH) &&
           verifier.EndTable();
  }
};

struct UpdateHealthBuilder {
  typedef UpdateHealth Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(UpdateHealth::VT_UID, uid, 0);
  }
  void add_health(float health) {
    fbb_.AddElement<float>(UpdateHealth::VT_HEALTH, health, 0.0f);
  }
  explicit UpdateHealthBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UpdateHealth> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UpdateHealth>(end);
    return o;
  }
};

inline flatbuffers::Offset<UpdateHealth> CreateUpdateHealth(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    float health = 0.0f) {
  UpdateHealthBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_health(health);
  return builder_.Finish();
}

struct MoveObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_POSITION = 6,
    VT_ROTATION = 8
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const Vector2 *position() const {
    return GetStruct<const Vector2 *>(VT_POSITION);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<Vector2>(verifier, VT_POSITION) &&
           VerifyField<float>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct MoveObjectBuilder {
  typedef MoveObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(MoveObject::VT_UID, uid, 0);
  }
  void add_position(const Vector2 *position) {
    fbb_.AddStruct(MoveObject::VT_POSITION, position);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(MoveObject::VT_ROTATION, rotation, 0.0f);
  }
  explicit MoveObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MoveObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveObject> CreateMoveObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const Vector2 *position = 0,
    float rotation = 0.0f) {
  MoveObjectBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

struct RequestObjectRemoval FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestObjectRemovalBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct RequestObjectRemovalBuilder {
  typedef RequestObjectRemoval Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(RequestObjectRemoval::VT_UID, uid, 0);
  }
  explicit RequestObjectRemovalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RequestObjectRemoval> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RequestObjectRemoval>(end);
    return o;
  }
};

inline flatbuffers::Offset<RequestObjectRemoval> CreateRequestObjectRemoval(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0) {
  RequestObjectRemovalBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct RemoveObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RemoveObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct RemoveObjectBuilder {
  typedef RemoveObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(RemoveObject::VT_UID, uid, 0);
  }
  explicit RemoveObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RemoveObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveObject> CreateRemoveObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0) {
  RemoveObjectBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_POSITION_H_
