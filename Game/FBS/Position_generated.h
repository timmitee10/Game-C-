// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSITION_H_
#define FLATBUFFERS_GENERATED_POSITION_H_

#include "flatbuffers/flatbuffers.h"

struct Vector3;

struct Vector2;

struct createObject;
struct createObjectBuilder;

struct moveObject;
struct moveObjectBuilder;

struct removeObject;
struct removeObjectBuilder;

enum objectTypes : uint8_t {
  objectTypes_Player = 0,
  objectTypes_Bullet = 1,
  objectTypes_MIN = objectTypes_Player,
  objectTypes_MAX = objectTypes_Bullet
};

inline const objectTypes (&EnumValuesobjectTypes())[2] {
  static const objectTypes values[] = {
    objectTypes_Player,
    objectTypes_Bullet
  };
  return values;
}

inline const char * const *EnumNamesobjectTypes() {
  static const char * const names[3] = {
    "Player",
    "Bullet",
    nullptr
  };
  return names;
}

inline const char *EnumNameobjectTypes(objectTypes e) {
  if (flatbuffers::IsOutRange(e, objectTypes_Player, objectTypes_Bullet)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesobjectTypes()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vector2()
      : x_(0),
        y_(0) {
  }
  Vector2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vector2, 8);

struct createObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef createObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_TYPE = 6,
    VT_POSITION = 8,
    VT_ROTATION = 10
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  objectTypes type() const {
    return static_cast<objectTypes>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const Vector2 *position() const {
    return GetStruct<const Vector2 *>(VT_POSITION);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<Vector2>(verifier, VT_POSITION) &&
           VerifyField<float>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct createObjectBuilder {
  typedef createObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(createObject::VT_UID, uid, 0);
  }
  void add_type(objectTypes type) {
    fbb_.AddElement<uint8_t>(createObject::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_position(const Vector2 *position) {
    fbb_.AddStruct(createObject::VT_POSITION, position);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(createObject::VT_ROTATION, rotation, 0.0f);
  }
  explicit createObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<createObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<createObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<createObject> CreatecreateObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    objectTypes type = objectTypes_Player,
    const Vector2 *position = 0,
    float rotation = 0.0f) {
  createObjectBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  builder_.add_type(type);
  return builder_.Finish();
}

struct moveObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef moveObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_POSITION = 6,
    VT_ROTATION = 8
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  const Vector2 *position() const {
    return GetStruct<const Vector2 *>(VT_POSITION);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           VerifyField<Vector2>(verifier, VT_POSITION) &&
           VerifyField<float>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct moveObjectBuilder {
  typedef moveObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(moveObject::VT_UID, uid, 0);
  }
  void add_position(const Vector2 *position) {
    fbb_.AddStruct(moveObject::VT_POSITION, position);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(moveObject::VT_ROTATION, rotation, 0.0f);
  }
  explicit moveObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<moveObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<moveObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<moveObject> CreatemoveObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    const Vector2 *position = 0,
    float rotation = 0.0f) {
  moveObjectBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

struct removeObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef removeObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct removeObjectBuilder {
  typedef removeObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(removeObject::VT_UID, uid, 0);
  }
  explicit removeObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<removeObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<removeObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<removeObject> CreateremoveObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0) {
  removeObjectBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_POSITION_H_
